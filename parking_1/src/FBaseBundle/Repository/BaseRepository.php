<?php

namespace FBaseBundle\Repository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query;
use UsersBundle\Entity\User;
use FBaseBundle\Entity\BaseNoms;


// FBaseBundle\Repository\BaseRepository

//use Doctrine\ORM\EntityManager;
/**
 * BaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
trait BaseRepository {
//class BaseRepository extends \Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository

    private $qb;
    private $query;
    private $nq = 0;

    private $eAlias;

    // WARNING: For counter/paginator have in mind joins - https://stackoverflow.com/questions/14884183/doctrine-querybuilder-limit-and-offset
    public function findCountBy($search, $order = null) {
        $entity = $this->_entityName;
        $this->eAlias = ' cnt_'.str_replace('\\', '_', $entity);
        $pk = $this->_em->getMetadataFactory()->getMetadataFor(ltrim($entity, '\\'))->identifier[0];
        $q = $this->_em->createQueryBuilder($this->eAlias)
            ->select('COUNT('.$this->eAlias.'.'.$pk.')')
            ->from($entity, $this->eAlias);
        $q = $this->_buildWhereFromArray($q, $this->eAlias, $search);
        if ($order)
          $q = $this->_buildOrderFromArray($q, $this->eAlias, $order);
        return $q->getQuery()->getSingleScalarResult();
    }

    public function findAssocBy(array $columns, array $search, array $order = null, $limit = 100, $offset = 0) {
      $entity = $this->_entityName;
      $this->eAlias = $entity;

      if (sizeof($columns)>2)
        throw new \Exception("Columns for Associative result must be 2!",202);
      $cols = [];
      foreach($columns as $col) {
        $cols[] = 'q.'.$col;
      }
      $pk = $this->_em->getMetadataFactory()->getMetadataFor(ltrim($entity, '\\'))->identifier[0];
      $q = $this->_em->createQueryBuilder($this->eAlias, 'q')
        ->select(join(',',$cols))
        ->from($entity, 'q');
        $q = $this->_buildWhereFromArray($q, 'q', $search);
        if ($order)
            $q = $this->_buildOrderFromArray($q, 'q', $order);
        $q->setFirstResult($offset)
          ->setMaxResults($limit);
        //echo $q->getQuery()->getDQL();exit;
        //dump($q->getQuery());exit;
        //dump($q->getQuery()->getResult());exit;

        $r = $q->getQuery()->getResult(Query::HYDRATE_ARRAY);
        //dump($r);exit;
        if (!$r) return null;

        $result = [];
        foreach($r as $row) {
            $result[$row[$columns[0]]] = $row[$columns[1]];
        }
        return $result;
    }
/*
    public function findArrayBy($coloms,$search, $order, $limit, $offset) {
      $entity = $this->_entityName;
      $this->eAlias = $entity;
      //dump($this->eAlias);exit;

      $pk = $this->_em->getMetadataFactory()->getMetadataFor(ltrim($entity, '\\'))->identifier[0];
      $q = $this->_em->createQueryBuilder($this->eAlias)
        ->select('q')
        ->from($entity, $this->eAlias);
        $q = $this->_buildWhereFromArray($q, $this->eAlias, $search);
        $q = $this->_buildOrderFromArray($q, $this->eAlias, $order);
        $q->setFirstResult($offset)
          ->setMaxResults($limit);
        //echo $this->query->getQuery()->getDQL();exit;
        //dump($this->query->getQuery());exit;
        //dump($this->query->getQuery()->getResult());exit;
         // dump($q->getQuery()->getResult(Query::HYDRATE_ARRAY));
        return $q->getQuery()->getResult(Query::HYDRATE_ARRAY);
    }
*/
    private function _buildWhereFromArray(QueryBuilder $query, $eAlias, array $search) {
//dump($search);exit;
      foreach($search as $field => $val) {
        $query->andWhere($eAlias .'.' . $field . ' = :v_'.$field)
          ->setParameter('v_'.$field, $val);
      }
      return $query;
    }

    private function _buildOrderFromArray(QueryBuilder $query, $eAlias, array $order) {
      foreach ($order as $field => $dir) {
        $query->addOrderBy($eAlias .'.' . $field, $dir);
      }
      return $query;
    }





    /**
    *@ function getAlias
    *@ params:
    *@ (array) $tables
    */

    private function getAlias($tables=false) {
        $join = 'j';
        if(!empty($tables)){
        $alias = 'q';
            foreach ($tables as $key => $value) {
                $alias.=','.$join;
                $join.='j';
            }
        }else{
            $alias = 'q';
        }

        return $alias;
    }

    /**
    *@ function join
    *@ params:
    *@ (array) $data
    */

    private function join($data) {
        $jAlias ='j';
        foreach ($data as $key => $value) {
          $tmpAlias = (isset($value['alias'])&&!empty($value['alias'])?$value['alias']:$jAlias);
          $field = isset($value['isCustom'])&&!empty($value['isCustom'])?$value['isCustom']:'q.'.$key;
          $this->query->join($field,$tmpAlias);
          if(isset($value['criteries'])&&!empty($value['criteries'])){
                $this->criteria($value['criteries'],$tmpAlias);
          }
          $jAlias.='j';
        }
    }


    public function customSearches($searchData) {
      /* passed form grid setup
        [
            // elPath is grid field name
            'elPath' => [
                // field is EntityName
                ['field' => 'course',
                    'join' => ['type'=>'left', 'selField'=> 'name', 'alias' => 'cj',],
                    'where' => ['type' => 'andLike', 'field' => 'cj.name', 'value' =>  ':val', 'valSetter' => 'val']
                ]
            ],
        ]
      */
        $ors = [];
        $ands = [];
        $params = [];
//dump($searchData);exit;
      foreach ($searchData as $resField => $joins) {
        $globalWhereType = 'and';
        //dump($joins);exit;
        foreach ($joins as $value) {
          // this is search global where type. ADN/OR. This determines how we append this field search to other where clause params.
          if (isset($value['globalWhereType'])) {
            $globalWhereType = $value['globalWhereType'];
            continue;
          }
          if (isset($value['field']) && isset($value['join']['selField']) && isset($value['join']['alias'])) {
          //['field' => 'course', 'join' => ['type'=>'left', 'selField'=> 'name', 'alias' => 'cj',], 'where' => ['type' => 'and', 'clause' => 'cj.name LIKE :val', 'valSetter' => 'val', 'value' => stringa]]
          // add join
            //echo 'join: '.print_r($value,true);exit;
            $alias = isset($value['custom_join'])&&!empty($value['custom_join'])?$value['custom_join']:$this->eAlias;
            if (!isset($value['join']['type'])) {
              $this->query->inner($alias.'.'.$value['field'],$value['join']['alias']);
            } else {
              switch ($value['join']['type']) {
                case 'left':
                  $this->query->leftJoin($alias.'.'.$value['field'],$value['join']['alias']);
                  break;
                case 'inner':
                  $this->query->innerJoin($alias.'.'.$value['field'],$value['join']['alias']);
                  break;
                default:
                  $this->query->join($alias.'.'.$value['field'],$value['join']['alias']);
                  break;
              }
            }
          }
          // add where
//dump($value);//exit;
          if (isset($value['where'])) {
            // convert single where in array
            if(isset($value['where']['clause']) && !empty($value['where']['value'])) {
                $wheres = [$value['where']];
            } else {
                $wheres = $value['where'];
            }

            foreach($wheres as $where) {
                if (isset($where['clause']) && stristr($where['clause'],'{{entityAlias}}')) {
                  $where['clause'] = str_replace('{{entityAlias}}', $this->eAlias, $where['clause']);
                }
                //dump($value);//exit;
                /*
                if(isset($value['where']['valType']) && $value['where']['valType'] == 'date') {
                    if(preg_match('/\d{2}\.\d{2}\.\d{4}/', $value['where']['value'])) {
                        $tmp = explode('.', $value['where']['value']);
                        $value['where']['value'] = $tmp[2].'-'.$tmp[1].'-'.$tmp[0] . ' 00:00:00';
                    }
                    $value['where']['value'] = new \DateTime($value['where']['value']);
                        //dump($value);exit;
                }
                */
//dump($where['value']);
                if(isset($where['value'])) {
                    if (isset($where['type'])) {
                        foreach(['like','slike','elike'] as $sl) {
                            if(isset($where[$sl]))
                                $where['value'] = str_replace('{{val}}', $where['value'], $where[$sl]);
                        }
                      switch ($where['type']) {
                        case 'and':
                          $ands[] = $this->qb->expr()->andX($where['clause']);
                          //$this->query->setParameter($where['valSetter'], $where['value']);
                          $params[$where['valSetter']] = $where['value'];
                          break;
                        case 'or':
                          $ors[] = $this->qb->expr()->orX($where['clause']);
                          //$this->query->setParameter($where['valSetter'], $where['value']);
                          $params[$where['valSetter']] = $where['value'];
                          break;
                        default:
                          $ands[] = $this->qb->expr()->andX($where['clause']);
                          //$this->query->setParameter($where['valSetter'], $where['value']);
                          $params[$where['valSetter']] = $where['value'];
                          break;
                      }
                    } else {
                      $ands[] = $this->qb->expr()->andX($where['clause']);
                      //$this->query->setParameter($where['valSetter'], $where['value']);
                      $params[$where['valSetter']] = $where['value'];
                    }
                } else {
                }
                    //$this->query->groupBy('q.id');
            }
          }
        }
        //$this->query->andWhere($fieldWhere);
      }
//dump($ors);exit;
//dump($ands);exit;
        if (sizeof($ors)>0) {
          //echo "ANDXORA".print_r($orsParams,true);
          if ($globalWhereType == 'and')
            $this->query->andWhere($this->qb->expr()->orX(...$ors));//->setParameters($orsParams);
          if ($globalWhereType == 'or')
            $this->query->orWhere($this->qb->expr()->orX(...$ors));//->setParameters($orsParams);
        }
        if (sizeof($ands)>0) {
          if ($globalWhereType == 'or')
            $this->query->orWhere($this->qb->expr()->andX(...$ands));//->setParameters($orsParams);
          if ($globalWhereType == 'and')
            //echo "ANDXORA".print_r($orsParams,true);
            $this->query->andWhere($this->qb->expr()->andX(...$ands));//->setParameters($orsParams);
        }
        foreach ($params as $field=>$value) {
          $this->query->setParameter($field, $value);
        }
    }

    /**
    *@ function Criteria
    *@ params:
    *@ (array) $criteries
    */

    private function criteria($criteries,$alias='q') {
        $nq = 0;
        $ors=$orsParams=[];
        $params = [];
        foreach ($criteries as $key => $value) {
            //dump($value);exit;
            $this->nq++;
            switch ($key) {
               case 'between':
                    foreach ($value as $field => $val) {

                        $this->query->andWhere(
                            $this->qb->expr()->between($alias.'.'.$field,"'".$val['from']."'","'".$val['to']."'")
                        );
                    }
                   break;
                case 'gt':
                    foreach ($value as $field => $val) {
                         $this->query->andWhere($this->qb->expr()->gt($alias.'.'.$field,':'.$field));//->setParameter($field, $val);
                         $params[$field] = $val;

                    }
                   break;
                case 'lt':
                    foreach ($value as $field => $val) {
                        $this->query->andWhere($this->qb->expr()->lt($alias.'.'.$field,':'.$field));//->setParameter($field, $val);
                        $params[$field] = $val;
                    }
                   break;
                    case 'gte':
                    foreach ($value as $field => $val) {
                         $this->query->andWhere($this->qb->expr()->gte($alias.'.'.$field,':'.$field));//->setParameter($field, $val);
                         $params[$field] = $val;
                    }
                   break;
                   case 'lte':
                    foreach ($value as $field => $val) {

                        $this->query->andWhere($this->qb->expr()->lte($alias.'.'.$field,':'.$field));//->setParameter($field,$val);
                        $params[$field] = $val;
                    }
                   break;
                   case 'orGte':
                    foreach ($value as $field => $val) {
                         //$this->query->andWhere($this->qb->expr()->gte($alias.'.'.$field,':'.$field))->setParameter($field, $val);
                         $ors[] = $this->qb->expr()->gte($alias.'.'.$field,':'.$field);
                        // $ors[] = [$alias.'.'.$field . ' >= :'.$field];
                         $orsParams[$field]="{$val}";
                         $params[$field] = $val;
                    }
                   break;
                   case 'orLte':
                    foreach ($value as $field => $val) {
                         $ors[] = $this->qb->expr()->lte($alias.'.'.$field,':'.$field);
                         $orsParams[$field]="{$val}";
                         $params[$field] = $val;
                    }
                   break;
                case 'in':
                    //$field is field name
                    //$val must be array
                    foreach ($value as $field => $val) {
                        if(is_array($val)){
                          $this->query->andWhere($this->qb->expr()->in($alias.'.'.$field,':'.$field));//->setParameter($field,$val);
                          $params[$field] = $val;
                        }

                    }
                   break;
                case 'notIn':
                    //$field is field name
                    //$val must be array
                    foreach ($value as $field => $val) {
                     if(is_array($val)){
                      $this->query->andWhere($this->qb->expr()->notIn($alias.'.'.$field,':'.$field));//->setParameter($field,$val);
                      $params[$field] = $val;
                     }

                    }
                   break;
                case 'like':
                    foreach ($value as $field => $val) {
                        $this->query->andWhere($this->qb->expr()->like($alias.'.'.$field, ':'.$field));//->setParameter($field,"%{$val}%");
                        $params[$field] = '%'.$val.'%';
                    }
                   break;
                case 'slike':
                    foreach ($value as $field => $val) {
                       $this->query->andWhere($this->qb->expr()->like($alias.'.'.$field,':'.$field));//->setParameter($field,"%{$val}");
                       $params[$field] = '%'.$val;

                    }
                  break;
                case 'orLike':
                  foreach ($value as $field => $val) {
                    //$ors[] = $this->qb->expr()->like($alias.'.'.$field, ':'.$field);
                    $ors[] = $alias.'.'.$field . ' LIKE :'.$field;
                    $orsParams[$field]="%{$val}%";
                    $params[$field] = '%'.$val.'%';
                  }
                  break;
                  case 'orEq':
                  foreach ($value as $field => $val) {
                    $ors[] = $alias.'.'.$field.'=:'.$field;
                    $orsParams[$field]="{$val}";
                    $params[$field] = $val;
                  }
                break;
                case 'orSlike':
                  foreach ($value as $field => $val) {
                    $ors[] = [$alias.'.'.$field . ' LIKE :'.$field];
                    $orsParams[$field]="%{$val}";
                    $params[$field] = '%'.$val;
                  }
                break;
                case 'eq':
                    foreach ($value as $field => $val) {
                        $this->query->andWhere($alias.'.'.$field.'=:'.$field.$this->nq);//->setParameter($field.$this->nq,$val);
                        $params[$field.$this->nq] = $val;
                    }
                break;
                case 'isNull':
                    foreach ($value as $field => $val) {
                        $this->query->andWhere($this->qb->expr()->isNull($alias.'.'.$field));
                    }
                break;
                case 'eqOrNull':
                    foreach ($value as $field => $val) {
                        $this->query->andWhere(
                          $alias.'.'.$field.'=:'.$field.$this->nq.' or '.$this->qb->expr()->isNull($alias.'.'.$field));//->setParameter($field.$this->nq,$val);
                        $params[$field.$this->nq] = $val;
                    }
                break;
                case 'isNotNull':
                    foreach ($value as $field => $val) {
                        $this->query->andWhere($this->qb->expr()->isNotNull($alias.'.'.$field));
                    }
                break;
                default:
                      //$value = is_string($value)?$this->connection->quote($value):$value;
                      $this->query->andWhere($alias.'.'.$key.'=:'.$key);//->setParameter($key,$value);
                      $params[$key] = $value;
                    break;
           }
        }
        if (sizeof($ors)>0) {
          //echo "ANDXORA".print_r($orsParams,true);
          $this->query->andWhere($this->qb->expr()->orX(...$ors));//->setParameters($orsParams);
        }
        foreach ($params as $field=>$value) {
          $this->query->setParameter($field, $value);
        }
    }


    /**
    *@ function readList
    *@ params:
    *@ (array) $data
    *@ (callable) $prepareQuery
    */
    /*
    example $data
    $data['table'] = "AppBundle:User";
    $data['criteries'] = array('field'=>'value'); where username = user
    $data['criteries']['like'] = array('field'=>'value'); where username like '%user%'
    join:
    $data['join'] = array('JoinField'=>
                            array('criteries'=>array('field'=>'value','field'=>'value'))//if not have criteries set only true,
                          'OtherJoinField'=>true
    ALSO CHECK customSearches description!

    )
    */
    public function readList($data, $prepareQuery = false) {
        //print_r($data);exit;
        $alias = $this->getAlias(isset($data['join'])?$data['join']:false);
        $this->eAlias = isset($data['alias'])&&!empty($data['alias'])?$data['alias']:'q';
        $this->qb = $this->createQueryBuilder($this->eAlias);
        $this->query = $this->qb;//->select($this->eAlias);


      //  $this->query = $this->qb->from($data['table'],' q');
        if(isset($data['criteries'])&&!empty($data['criteries'])){
//dump($data['criteries']);exit;
            $this->criteria($data['criteries'],$this->eAlias);
        }

        if(isset($data['join'])&&!empty($data['join'])){
            $this->join($data['join']);
        }


        if (isset($data['customSearches']) && is_array($data['customSearches'])) {
//dump($data['customSearches']);exit;
            $this->customSearches($data['customSearches']);
        }
        if(isset($data['order'])&&!empty($data['order'])){
            $dataOrd = [];
            if (strstr(key($data['order']),',')) {
                // we defined multi fields to order by.
                // we must split them all and add them one by one with current order type,
                // otherwise it won't sort properly - sorts undefined type ASC and the last one with proper type
                $tmp = explode(",",key($data['order']));
                foreach($tmp as $okey) {
                    $dataOrd[$okey] = current($data['order']);
                }
            } else {
                $dataOrd[key($data['order'])] = current($data['order']);
            }
//dump($data['order']);
//dump($dataOrd);exit;
            foreach($dataOrd as $key => $ord) {
                if(strstr($key,'.'))
                    $this->qb->addOrderBy($key, $ord);
                else
                    $this->qb->addOrderBy($this->eAlias.'.'.$key, $ord);
            }

        }

        if(isset($data['limit'])&&!empty($data['limit'])){
            $this->qb->setMaxResults($data['limit']);
        }

        if(isset($data['offset'])&&!empty($data['offset'])){
            $this->qb->setFirstResult($data['offset']);
        }

        if(isset($data['group_by'])&&!empty($data['group_by'])) {
            $alias = $data['group_by']['alias']??'q';
            $this->qb->groupBy($alias.'.'.$data['group_by']['field']);
        }

        if (is_callable($prepareQuery)) {
            $prepareQuery($this->query, true);
        }
//dump($data);
//dump($this->query->getParameters());
//echo $this->query->getQuery()->getDQL();exit;
//dump($this->query->getQuery());
//dump($this->query->getQuery());exit;
//dump($this->query->getQuery()->getResult());exit;
        return  $this->query->getQuery()->getResult();
    }

    public function getCount($data, $prepareQuery = false){

        /*$alias = $this->getAlias(isset($data['join'])?$data['join']:false);
        $this->qb = $this->createQueryBuilder('q');
        */
        $alias = $this->getAlias(isset($data['join'])?$data['join']:false);
        $this->eAlias = isset($data['alias'])&&!empty($data['alias'])?$data['alias']:'q';
        $this->qb = $this->createQueryBuilder($this->eAlias);
        $this->query = $this->qb->select($this->eAlias);
        //$this->query = $this->qb->select('count(q), q.id');


        if(isset($data['criteries'])&&!empty($data['criteries'])){
            $this->criteria($data['criteries'],$this->eAlias);
        }

        if(isset($data['join'])&&!empty($data['join'])){
            $this->join($data['join']);
        }

        if (isset($data['customSearches']) && is_array($data['customSearches'])) {
            $this->customSearches($data['customSearches']);
        }

        if (is_callable($prepareQuery)) {
            $prepareQuery($this->query, false);
        }
        $r = $this->query->getQuery()->getResult();
        //count all
        return  count($r);

    }

    // write

    /**
    *@ function writePreparation (preparation data for insert)
    *@ params:
    *@ (array) $data
    *@ return array
    * /

    private function writePreparation($data){
      $result = [];
      foreach ($this->_class->getAssociationMappings() as $name => $relation) {
        if (!$this->_class->isInheritedAssociation($name)){
            if(isset($relation['joinColumns'])){
              foreach ($relation['joinColumns'] as $joinColumn) {
                  if(array_key_exists($name,$data)){
                    $data[$joinColumn['name']] = $data[$name];
                    unset($data[$name]);
                  }
              }
            }

        }
      }

      $result =$data;

      return $result;

    }
*/
    /**
    *@ function write
    *@ params:
    *@ (object) $class
    *@ (array) $data
    *@ (array) $where
    *@ return id
    */
    /*
    example $data
    $class = table
    $data = array('field'=>value);
    $where = ['field'=>'value']
    * /
    public function write($data,User $user, $where=array()){
        if(!in_array('ROLE_ADMIN', $user->getRoles())){
          return ['error'=>'You have not permision'];
        }
        $model = new $this->_entityName;
        if(!empty($where)){
         $this->qb = $this->createQueryBuilder('q');
         $this->query = $this->qb->select('q');
         $this->criteria($where,'q');
         //single modela
         $model = $this->query->getQuery()->getResult();
         if(!empty($model)){
            $model = $model[0];
         }else{
          return ['error'=>'not found entitty by criteries'];
         }
        }
        if(!empty($data)){
          foreach ($data as $key => $value) {
            $setter = 'set'.ucfirst($key);
            $model->$setter($value);
          }
        }
        $this->_em->persist($model);
        $this->_em->flush();

        //die();
        /*
        $data = $this->writePreparation($data);
        $result = false;
        if(!empty($data)){
          if($where){
            $where = $this->writePreparation($where);

            if(!isset($data['updated_by'])){
            //  $data['updated_by'] = $this->container->get('security.token_storage')->getToken()->getUser()->getId();
            }
            if(!isset($data['updated_at'])){
              $data['updated_at'] =date('Y-m-d H:i:s');
            }
            $this->_em->getConnection()->update($this->_entityName,$data,$where);
          }else{
            if(!isset($data['created_by'])){
             // $data['created_by'] = $this->container->get('security.token_storage')->getToken()->getUser()->getId();
            }
            if(!isset($data['created_at'])){
              $data['created_at'] =date('Y-m-d H:i:s');
            }
            $this->_em->getConnection()->insert($this->_entityName,$data);
          }
          $result = $this->_em->getConnection()->lastInsertId();
        } * /
        return $model;

    }
*/

    public function findParentTree(\FBaseBundle\Entity\BaseNoms $nom, array &$tree=[], $depth=0) {
      //$nomType = $nom->getType();//$this->_em->getRepository('FBaseBundle:NomType')->find($nom->getType());
      $tree[$nom->getType()->getId()] = [ 'id' => $nom->getId(), 'value' => $nom->getName(), 'type' => $nom->getType()->getId(), 'name' => $nom->getType()->getName()];
      if ($nom->getParentId()) {
        $parentNom = $nom->getParent();//$this->_em->getRepository('FBaseBundle:BaseNoms')->find($nom->getParentId());
        if ($parentNom && $depth < 100 && $parentNom->getType()->getId() != 'module.root')
          $this->findParentTree($parentNom, $tree, ++$depth);
      }
      return $tree;
    }


}
