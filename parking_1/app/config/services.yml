# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false


    fbase.menu:
        class: FBaseBundle\Menu\MenuBuilder
        arguments: ["@service_container" ]
        public: true

    date_type_extension:
        class: FBaseBundle\Form\Extension\DateTypeExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\DateType }

    date_time_type_extension:
        class: FBaseBundle\Form\Extension\DateTimeTypeExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\DateTimeType }

    entity_type_extension:
        class: FBaseBundle\Form\Extension\EntityTypeExtension
        tags:
            - { name: form.type_extension, extended_type: Symfony\Bridge\Doctrine\Form\Type\EntityType }

    base_repository:
        class: FBaseBundle\Repository\BaseRepository
        arguments:
            - '@doctrine.orm.entity_manager'
        public: true
    user.create_info_after_registration_subscriber:
        class: UsersBundle\EventListener\CreateInfoAfterRegistrationSubscriber
        autowire: true
        tags:
            - { name: kernel.event_subscriber }
    notification:
        class: FBaseBundle\Service\notification
        arguments:
            - "@doctrine.orm.entity_manager"
            - '@security.token_storage'
        public: true

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    #AppBundle\:
     #   resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
     #   exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    #AppBundle\Controller\:
     #   resource: '../../src/AppBundle/Controller'
     #   public: true
     #   tags: ['controller.service_arguments']

    # this creates a service per class whose id is the fully-qualified class name
    FBaseBundle\:
        resource: '../../src/FBaseBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/FBaseBundle/{Entity,Repository,Tests,Form/EventListener/BNomTreeTypeSaveFields.php}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    FBaseBundle\Controller\:
        resource: '../../src/FBaseBundle/Controller'
        public: true
        tags: ['controller.service_arguments']


    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name


    UsersBundle\:
        resource: '../../src/UsersBundle/*'
        exclude: '../../src/UsersBundle/{Entity,Repository,Tests,Controller}'


    FBaseBundle\Form\Extension\FieldTypeHelpExtension:
        tags:
            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FormType }
#    AppBundle\Form\Extension\EntityTypeExtension:
#        tags:
#            - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\EntityType }
            #- { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\ChoiceType }
    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    app.twig.extension.loader:
        class: Twig\Extension\StringLoaderExtension
        tags:
            - { name: 'twig.extension' }